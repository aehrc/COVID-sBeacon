openapi: 3.0.0
servers: []
info:
  title: Serverless Beacon API
  version: 0.3.0
  description:
    Provides an API for contributing to and querying a serverless ga4gh beacon
    instance.
  contact:
    email: brendan.hosking@csiro.au
externalDocs:
  description: Beacon Project
  url: 'http://beacon-project.io/'
paths:
  /:
    summary: Get information about the beacon
    get:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beacon'
    options:
      responses:
        200:
          description: OK
  /query:
    get:
      description: Get response to a beacon query for allele information.
      operationId: getBeaconAlleleResponse
      parameters:
        - name: referenceName
          description: 'Reference name (chromosome). Accepting values 1-22, X, Y, M.'
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Chromosome'
        - name: start
          description: |
            Precise start coordinate position, allele locus (0-based).
            * start only:
              - for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified alternateBases
              - typical use are queries for SNV and small InDels
              - the use of "start" without an "end" parameter requires the use of "referenceBases"
            * start and end:
              - special use case for exactly determined structural changes
          in: query
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: startMin
          description: |
            Minimum start coordinate
            * startMin + startMax + endMin + endMax
              - for querying imprecise positions (e.g. identifying all structural variants starting anywhere between startMin <-> startMax, and ending anywhere between endMin <-> endMax
              - single or douple sided precise matches can be achieved by setting startMin = startMax XOR endMin = endMax
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: startMax
          description: |
            Maximum start coordinate. See startMin.
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: end
          description: |
            Precise end coordinate. See start.
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: endMin
          description: |
            Minimum end coordinate. See startMin.
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: endMax
          description: |
            Maximum end coordinate. See startMin.
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: referenceBases
          description: >
            Reference bases for this variant (starting from `start`). Accepted
            values: [ACGT]*

            When querying for variants without specific base alterations (e.g.
            imprecise structural variants with separate variant_type as well as
            start_min & end_min ... parameters), the use of a single "N" value
            is required.
          in: query
          required: true
          schema:
            type: string
            pattern: '^([ACGT]+|N)$'
        - name: alternateBases
          description: >
            The bases that appear instead of the reference bases. Accepted
            values: [ACGT]* or N.

            Symbolic ALT alleles (DEL, INS, DUP, INV, CNV, DUP:TANDEM, DEL:ME,
            INS:ME) will be represented in `variantType`.

            Optional: either `alternateBases` or `variantType` is required.
          in: query
          required: false
          schema:
            type: string
            pattern: '^([ACGT]+|N)$'
        - name: variantType
          description: >
            The `variantType` is used to denote e.g. structural variants.

            Examples:

            * DUP: duplication of sequence following `start`; not necessarily in
            situ

            * DEL: deletion of sequence following `start`


            Optional: either `alternateBases` or `variantType` is required.
          in: query
          required: false
          schema:
            type: string
        - name: assemblyId
          description: 'Assembly identifier (GRC notation, e.g. GRCh37).'
          in: query
          required: true
          schema:
            type: string
        - name: datasetIds
          description: >-
            Identifiers of datasets, as defined in "BeaconDataset". If this
            field is null/not specified, all datasets should be queried.
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: includeDatasetResponses
          description: >
            Indicator of whether responses for individual datasets
            (datasetAlleleResponses) should be included in the response
            (BeaconAlleleResponse) to this request or not.

            If null (not specified), the default value of NONE is assumed.
          in: query
          required: false
          schema:
            type: string
            enum:
              - ALL
              - HIT
              - MISS
              - NONE
        - name: variantsSkip
          description: |
            Number of variants to skip when returning variant-specific annotations.
            Default is 0.
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: variantsMax
          description: |
            Maximum number of variants to include when returning variant-specific annotations.
            If unspecified, no limit is applied.
          in: query
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BeaconAlleleResponse'
        '400':
          description: Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeaconAlleleResponse'
    post:
      description: Gets response to a beacon query for allele information.
      operationId: postBeaconAlleleResponse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BeaconAlleleResponse'
        '400':
          description: Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeaconAlleleResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeaconAlleleRequest'
        required: true
    options:
      responses:
        200:
          description: OK
  /submit:
    options:
      responses:
        200:
          description: OK
    patch:
      summary: Update a dataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetUpdate'
      responses:
        200:
          description: OK
        400:
          description: Bad Request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeaconError'
      security:
        - sigv4: []
    post:
      summary: Create a dataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetSubmit'
      responses:
        200:
          description: OK
        400:
          description: Bad Request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeaconError'
      security:
        - sigv4: []
components:
  schemas:
    Beacon:
      type: object
      required:
        - id
        - name
        - apiVersion
        - organization
        - datasets
      properties:
        id:
          type: string
          description: Unique identifier of the beacon. Use reverse domain name
            notation.
          example: org.ga4gh.beacon
        apiVersion:
          type: string
          description: Version of the API provided by the beacon.
          example: v1.0.0
        organization:
          $ref: '#/components/schemas/BeaconOrganization'
        datasets:
          description: Dataset(s) served by the beacon.
          type: array
          items:
            $ref: '#/components/schemas/BeaconDataset'
    BeaconAlleleRequest:
      description: Allele request as interpreted by the beacon.
      type: object
      required:
        - referenceName
        - referenceBases
        - assemblyId
      properties:
        referenceName:
          $ref: '#/components/schemas/Chromosome'
        start:
          description: |
            Precise start coordinate position, allele locus (0-based).
            * start only:
              - for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified alternateBases
              - typical use are queries for SNV and small InDels
              - the use of "start" without an "end" parameter requires the use of "referenceBases"
            * start and end:
              - special use case for exactly determined structural changes
          type: integer
          format: int64
          minimum: 0
        end:
          description: Precise end coordinate. See start.
          type: integer
        startMin:
          description: |
            Minimum start coordinate
            * startMin + startMax + endMin + endMax
              - for querying imprecise positions (e.g. identifying all structural variants starting anywhere between startMin <-> startMax, and ending anywhere between endMin <-> endMax
              - single or douple sided precise matches can be achieved by setting startMin = startMax XOR endMin = endMax
          type: integer
        startMax:
          description: Maximum start coordinate. See startMin.
          type: integer
        endMin:
          description: Minimum end coordinate. See startMin.
          type: integer
        endMax:
          description: Maximum end coordinate. See startMin.
          type: integer
        referenceBases:
          description: >
            Reference bases for this variant (starting from `start`). Accepted
            values: [ACGTUMRWSYKVHDBN]*
              When querying for variants without specific base alterations (e.g. imprecise structural variants with separate variant_type as well as start_min & end_min ... parameters), the use of a single "N" value is required.
          type: string
          pattern: '^[ACGTUMRWSYKVHDBN]+$'
        alternateBases:
          description: >
            The bases that appear instead of the reference bases. Accepted
            values: [ACGTUMRWSYKVHDBN]*.

            Symbolic ALT alleles (DEL, INS, DUP, INV, CNV, DUP:TANDEM, DEL:ME,
            INS:ME) will be represented in `variantType`.

            Optional: either `alternateBases` or `variantType` is required.
          type: string
          pattern: '^[ACGTUMRWSYKVHDBN]+$'
        variantType:
          description: >
            The `variantType` is used to denote e.g. structural variants.

            Examples:

            * DUP: duplication of sequence following `start`; not necessarily in
            situ

            * DEL: deletion of sequence following `start`


            Optional: either `alternateBases` or `variantType` is required.
          type: string
        assemblyId:
          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'
          type: string
          example: GRCh38
        datasetIds:
          description: >-
            Identifiers of datasets, as defined in `BeaconDataset`. If this
            field is null/not specified, all datasets should be queried.
          type: array
          nullable: true
          items:
            type: string
        includeDatasetResponses:
          description: >-
            Indicator of whether responses for individual datasets
            (datasetAlleleResponses) should be included in the response
            (BeaconAlleleResponse) to this request or not. If null (not
            specified), the default value of NONE is assumed.
          type: string
          enum:
            - ALL
            - HIT
            - MISS
            - NONE
    BeaconAlleleResponse:
      type: object
      required:
        - beaconId
      properties:
        beaconId:
          description: 'Identifier of the beacon, as defined in `Beacon`.'
          type: string
        apiVersion:
          description: >-
            Version of the API. If specified, the value must match `apiVersion`
            in Beacon
          type: string
        exists:
          nullable: true
          description: >-
            Indicator of whether the given allele was observed in any of the
            datasets queried. This should be non-null, unless there was an
            error, in which case `error` has to be non-null.
          type: boolean
        alleleRequest:
          $ref: '#/components/schemas/BeaconAlleleRequest'
        datasetAlleleResponses:
          description: >-
            Indicator of whether the given allele was  observed in individual
            datasets. This should be non-null if `includeDatasetResponses` in
            the corresponding `BeaconAlleleRequest` is true, and null otherwise.
          type: array
          items:
            $ref: '#/components/schemas/BeaconDatasetAlleleResponse'
        error:
          $ref: '#/components/schemas/BeaconError'
    BeaconDataset:
      type: object
      required:
        - id
        - name
        - assemblyId
        - createDateTime
        - updateDateTime
      properties:
        id:
          type: string
          description: Unique identifier of the dataset.
        name:
          type: string
          description: Name of the dataset.
        description:
          type: string
          nullable: true
          description: Description of the dataset.
        assemblyId:
          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'
          type: string
          example: GRCh38
        createDateTime:
          type: string
          description: The time the dataset was created (ISO 8601 format).
          example: '2012-07-29 or 2017-01-17T20:33:40'
        updateDateTime:
          type: string
          description: The time the dataset was updated in (ISO 8601 format).
          example: '2012-07-19 or 2017-01-17T20:33:40'
        version:
          type: string
          nullable: true
          description: Version of the dataset.
        variantCount:
          type: integer
          nullable: true
          format: int64
          description: Total number of variants in the dataset.
          minimum: 0
        callCount:
          type: integer
          nullable: true
          format: int64
          description: Total number of calls in the dataset.
          minimum: 0
        sampleCount:
          type: integer
          nullable: true
          format: int64
          description: Total number of samples in the dataset.
          minimum: 0
        externalUrl:
          type: string
          nullable: true
          description:
            URL to an external system providing more dataset information (RFC
            3986 format).
          example: 'http://example.org/wiki/Main_Page'
        info:
          $ref: '#/components/schemas/Info'
        dataUseConditions:
          $ref: '#/components/schemas/DataUseConditions'
    BeaconDatasetAlleleResponse:
      type: object
      required:
        - datasetId
      properties:
        datasetId:
          type: string
          description: not provided
        exists:
          description: >-
            Indicator of whether the given allele was observed in the dataset.
            This should be non-null, unless there was an error, in which case
            `error` has to be non-null.
          type: boolean
          nullable: true
        error:
          $ref: '#/components/schemas/BeaconError'
        frequency:
          type: number
          nullable: true
          description: Frequency of this allele in the dataset. Between 0 and 1,
            inclusive.
          minimum: 0
          maximum: 1
        variantCount:
          type: integer
          nullable: true
          description: Number of variants matching the allele request in the dataset.
          minimum: 0
        callCount:
          type: integer
          nullable: true
          description: Number of calls matching the allele request in the dataset.
          minimum: 0
        sampleCount:
          type: integer
          nullable: true
          description: Number of samples matching the allele request in the dataset
          minimum: 0
        note:
          type: string
          nullable: true
          description: Additional note or description of the response.
        externalUrl:
          type: string
          nullable: true
          description: >-
            URL to an external system, such as a secured beacon or a system
            providing more information about a given allele (RFC 3986 format).
        info:
          $ref: '#/components/schemas/Info'
    BeaconError:
      description: >-
        Beacon-specific error. This should be non-null in exceptional situations
        only, in which case `exists` has to be null.
      type: object
      nullable: true
      required:
        - errorCode
      properties:
        errorCode:
          type: integer
          format: int32
        errorMessage:
          type: string
    BeaconOrganization:
      description: Organization owning the beacon.
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Unique identifier of the organization.
        name:
          type: string
          description: Name of the organization.
    Chromosome:
      description: 'Reference name (chromosome). Accepting values 1-22, X, Y, M.'
      type: string
      enum:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - '10'
        - '11'
        - '12'
        - '13'
        - '14'
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
        - '21'
        - '22'
        - 'X'
        - 'Y'
        - 'M'
    DatasetSubmit:
      description: fields to create a new dataset.
      type: object
      required:
        - id
        - name
        - assemblyId
        - vcfLocations
      properties:
        id:
          type: string
          description: Unique identifier of the dataset.
        name:
          type: string
          description: Name of the dataset.
        assemblyId:
          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'
          type: string
          example: GRCh38
        vcfLocations:
          type: array
          description: Location of each VCF file.
          minItems: 1
          items:
            type: string
        description:
          type: string
          description: Description of the dataset.
          nullable: true
        version:
          type: string
          nullable: true
          description: Version of the dataset.
        externalUrl:
          nullable: true
          type: string
          description:
            URL to an external system providing more dataset information (RFC
            3986 format).
          example: 'http://example.org/wiki/Main_Page'
        info:
          $ref: '#/components/schemas/Info'
        dataUseConditions:
          $ref: '#/components/schemas/DataUseConditions'

    DatasetUpdate:
      description: fields to update in a dataset.
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique identifier of the dataset.
        name:
          type: string
          description: Name of the dataset.
        assemblyId:
          description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'
          type: string
          example: GRCh38
        vcfLocations:
          type: array
          description: Location of each VCF file to add.
          minItems: 1
          items:
            type: string
        description:
          type: string
          nullable: true
          description: Description of the dataset.
        version:
          type: string
          nullable: true
          description: Version of the dataset.
        externalUrl:
          type: string
          nullable: true
          description:
            URL to an external system providing more dataset information (RFC
            3986 format).
          example: 'http://example.org/wiki/Main_Page'
        info:
          $ref: '#/components/schemas/Info'
        dataUseConditions:
          $ref: '#/components/schemas/DataUseConditions'
    DataUseConditions:
      type: object
      nullable: true
      required:
        - consentCodeDataUse
        - adamDataUse
      description: Data use conditions ruling this dataset.
      properties:
        consentCodeDataUse:
          $ref: >-
            https://raw.githubusercontent.com/ga4gh/ga4gh-consent-policy/806ea53cffacb2055c3639f0fc9783f0dcd8cb02/consent_code.yaml#/components/schemas/ConsentCodeDataUse
        adamDataUse:
          $ref: >-
            https://raw.githubusercontent.com/ga4gh/ADA-M/b16a72f9987ae20f433e97d6a3247ecddd8dde23/adam.yaml#/components/schemas/Adam
    Info:
      description: Additional structured metadata, key-value pairs.
      nullable: true
      type: array
      items:
        type: object
        required:
          - key
          - value
        properties:
          key:
            type: string
          value:
            type: string
